# Author: Harsh Kohli
# Date created: 10/24/2020

from queue import Queue
import time


def shortestDistance(grid):
    rows, cols = len(grid), len(grid[0])
    buildings = []
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                buildings.append((i, j))

    num_buildings = len(buildings)
    distance_matrix = [[[float('inf') for _ in range(num_buildings)] for _ in range(cols)] for _ in range(rows)]
    masks = [[0 for _ in range(cols)] for _ in range(rows)]

    for index, building in enumerate(buildings):
        point = (building[0], building[1])
        q = Queue()
        q.put(point)
        q.put(None)
        visited, level = [], 0
        while not q.empty():
            point = q.get()
            if point is None:
                if q.empty():
                    break
                else:
                    q.put(None)
                    level = level + 1
                    continue
            x, y = point
            if x >= rows or y >= cols or x < 0 or y < 0 or grid[x][y] == 2 or (x, y) in visited:
                continue
            if grid[x][y] == 1 and level != 0:
                continue
            if masks[x][y] == 1 and level != 0:
                continue
            distance_matrix[x][y][index] = level
            q.put((x + 1, y))
            q.put((x - 1, y))
            q.put((x, y + 1))
            q.put((x, y - 1))
            visited.append(point)
        for i in range(rows):
            for j in range(cols):
                if distance_matrix[i][j][index] == float('inf'):
                    masks[i][j] = 1

    min_steps = float('inf')
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] != 0:
                continue
            array = distance_matrix[i][j]
            sum = 0
            for num in array:
                sum = sum + num
            if sum < min_steps:
                min_steps = sum

    if min_steps < float('inf'):
        return min_steps

    return -1


# grid = [[1, 0, 2, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]]
# print(shortestDistance(grid))

start = time.time()
grid = [
    [0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 1,
     0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2,
     1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0],
    [0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2,
     0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0,
     2, 2, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 0],
    [0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 0],
    [0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0,
     2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2],
    [0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0,
     0, 0, 2, 0, 0, 2, 0, 2, 1, 2, 0, 0, 0],
    [0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2,
     0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0],
    [2, 2, 2, 0, 1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 2, 0,
     0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0,
     0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0,
     0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0],
    [2, 1, 2, 0, 0, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0,
     0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0],
    [0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 2,
     2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0,
     1, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0],
    [2, 0, 2, 0, 0, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0,
     0, 0, 2, 0, 0, 1, 2, 0, 2, 0, 2, 2, 0],
    [0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2,
     0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1],
    [0, 2, 2, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2,
     2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0],
    [0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2,
     0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 2, 2, 2],
    [0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0,
     0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],
    [2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 1, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 2, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0,
     0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
    [0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0,
     2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2],
    [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0,
     2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1, 0],
    [0, 0, 2, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2,
     2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 2, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 2, 0, 0, 0,
     0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2],
    [0, 0, 0, 0, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0,
     0, 2, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 1,
     2, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1],
    [0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2,
     0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 2, 1, 1, 2, 0,
     2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0],
    [2, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2,
     0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2],
    [0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0,
     0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0],
    [0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 2, 1, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0,
     0, 0, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 2],
    [0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0,
     0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0],
    [2, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 0,
     0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0],
    [2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2,
     2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0],
    [2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 2,
     2, 2, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0],
    [1, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0,
     0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0],
    [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0,
     0, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, 2, 0],
    [2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0,
     0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0],
    [1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2,
     2, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 1],
    [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2,
     0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0,
     0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2],
    [2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0,
     2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 2],
    [0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0,
     2, 2, 0, 0, 0, 0, 2, 1, 0, 0, 2, 2, 0],
    [0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 0,
     0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0]]
print(shortestDistance(grid))
end = time.time()
print('Time taken is ' + str((end - start) * 1000) + 'ms')
